import React, { FC, memo, useCallback, useEffect, useMemo } from 'react';
import { Box } from 'rebass';
import { useDispatch, useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';
import { TrainingDataset } from '../../../../types/training-dataset';

import { Dispatch, RootState } from '../../../../store';

// Components
import Panel from '../../../../components/panel/Panel';
import TrainingDatasetOverviewSummary from './TrainingDatasetOverviewSummary';
import Anchor from '../../../../components/anchor/Anchor';
import routeNames from '../../../../routes/routeNames';
import TrainingDatasetFeatureList from './TrainingDatasetFeatureList';
import CodeCard from '../../feature-group/overview/CodeCard';
import { selectFeatureStoreData } from '../../../../store/models/feature/selectors';
import SchematisedTags from '../../feature-group/overview/SchematisedTags';
import PipelineHistory from '../../feature-group/overview/PipelineHistory';
import Provenance from './Provenance';
import useNavigateRelative from '../../../../hooks/useNavigateRelative';
import { useLatestVersion } from '../../../../hooks/useLatestVersion';
import { Select } from '@logicalclocks/quartz';
import SplitGraph from './SplitGraph';

export interface TrainingDatasetContentProps {
  data: TrainingDataset;
  onClickRefresh: () => void;
  onClickEdit: () => void;
}

const {
  featureList,
  provenance,
  schematisedTags,
  pipelineHistory,
  runningCode,
  splitGraph,
  api,
} = routeNames.overviewAnchors;

const TrainingDatasetOverviewContent: FC<TrainingDatasetContentProps> = ({
  data,
  onClickRefresh,
  onClickEdit,
}) => {
  const { id, tdId } = useParams();

  const { data: featureStoreData } = useSelector(selectFeatureStoreData);

  const query = useSelector(
    (state: RootState) => state.trainingDatasetQuery?.query,
  );

  const queryCode = useMemo(() => {
    return [
      {
        title: 'Query',
        code: query || 'Only available in training datasets generated by query',
      },
    ];
  }, [query]);

  const apiCode = useMemo(() => {
    return [
      {
        title: 'Python',
        code: `import hsfs
connection = hsfs.connection()
fs = connection.get_feature_store(name='${featureStoreData?.featurestoreName}')
td = fs.get_training_dataset('${data.name}', version=${data.version})`,
      },
      {
        title: 'Scala',
        code: `import com.logicalclocks.hsfs._ 
val connection = HopsworksConnection.builder().build();
val fs = connection.getFeatureStore(${featureStoreData?.featurestoreName});
val td = fs.getTrainingDataset(${data.name}, ${data.version})`,
      },
    ];
  }, [data, featureStoreData]);

  const dispatch = useDispatch<Dispatch>();

  useEffect(() => {
    if (
      featureStoreData?.featurestoreId &&
      data.id === +tdId &&
      data.fromQuery
    ) {
      dispatch.trainingDatasetQuery.fetch({
        projectId: +id,
        featureStoreId: featureStoreData.featurestoreId,
        trainingDatasetId: +tdId,
      });
    }

    if (featureStoreData?.featurestoreId) {
      dispatch.trainingDatasets.fetch({
        projectId: +id,
        featureStoreId: featureStoreData.featurestoreId,
      });
    }

    return () => {
      dispatch.trainingDatasetQuery.clear();
    };
  }, [id, tdId, dispatch, featureStoreData, data]);

  const navigate = useNavigateRelative();

  const trainingDatasets = useSelector(
    (state: RootState) => state.trainingDatasets,
  );

  const { latestVersion } = useLatestVersion(data, trainingDatasets);

  const versions = useMemo(() => {
    const versions = trainingDatasets.filter(({ name }) => name === data?.name);
    return versions.map(
      ({ version }) =>
        `${version.toString()} ${
          version.toString() === latestVersion ? '(latest)' : ''
        }`,
    );
  }, [data, latestVersion, trainingDatasets]);

  const handleVersionChange = useCallback(
    (values) => {
      const newId = trainingDatasets.find(
        ({ version, name }) =>
          version === +values[0].split(' ')[0] && name === data?.name,
      )?.id;

      navigate(`/td/${newId}`, routeNames.project.view);
    },
    [data, trainingDatasets, navigate],
  );

  return (
    <>
      <Panel
        title={String(data?.name)}
        id={data.id}
        onClickEdit={onClickEdit}
        onClickRefresh={onClickRefresh}
        idColor="labels.purple"
        hasVersionDropdown={true}
        versionDropdown={
          <Select
            mb="-5px"
            width="143px"
            listWidth="100%"
            value={[
              `${data?.version.toString()} ${
                data?.version.toString() === latestVersion ? '(latest)' : ''
              }`,
            ]}
            options={versions}
            placeholder="version"
            onChange={handleVersionChange}
          />
        }
      />
      <Box mt="40px" width="100%">
        <TrainingDatasetOverviewSummary data={data} />
        <Anchor groupName="tdOverview" anchor={featureList}>
          <TrainingDatasetFeatureList data={data.features} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={provenance}>
          <Provenance data={data.provenance} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={schematisedTags}>
          <SchematisedTags data={data.tags} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={pipelineHistory}>
          <PipelineHistory data={data.jobs} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={runningCode}>
          <CodeCard mt="20px" title="Query" content={queryCode} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={api}>
          <CodeCard mb="20px" mt="20px" title="API" content={apiCode} />
        </Anchor>

        <Anchor groupName="tdOverview" anchor={splitGraph}>
          <SplitGraph graph={data.splits} />
        </Anchor>
      </Box>
    </>
  );
};

export default memo(TrainingDatasetOverviewContent);
